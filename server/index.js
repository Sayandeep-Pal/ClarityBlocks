// server/server.js
const express = require("express");
const cors = require("cors");

const app = express();
const port = 5000;

app.use(cors()); // Enable CORS for all routes
app.use(express.json()); // To parse JSON request bodies

// --- API Endpoints ---

// Placeholder for generating Clarity code (currently handled client-side)
app.post("/api/generate-clarity", (req, res) => {
  // In a real scenario, this would take nodes/edges, process them, and return Clarity.
  // For this example, it's just a mock.
  console.log("Received request for Clarity generation:", req.body);
  const { nodes, edges } = req.body;
  // TODO: Implement server-side Clarity generation logic
  res.json({
    clarityCode: `;; This Clarity code was generated by the server!\n;; Nodes received: ${nodes.length}, Edges received: ${edges.length}`,
    status: "success",
  });
});

// Placeholder for cost analysis
app.post("/api/analyze-costs", (req, res) => {
  const { clarityCode } = req.body;
  // TODO: Integrate with Clarity VM or Stacks API for actual cost analysis
  res.json({
    costAnalysis: {
      readOnlyFunctions: 100,
      publicFunctions: 500,
      storageBytes: 1024,
      estimatedFee: "0.005 STX",
    },
    debugInfo: [],
    status: "success",
  });
});

// Placeholder for debugging/linter
app.post("/api/debug-contract", (req, res) => {
  const { clarityCode } = req.body;
  // TODO: Integrate with Clarity Linter or a sandbox environment
  const errors = []; // Example error
  if (clarityCode.includes("unsafe-function")) {
    errors.push({
      type: "warning",
      message: "Using 'unsafe-function' can lead to vulnerabilities.",
      line: 5,
    });
  }
  res.json({
    debugErrors: errors,
    status: "success",
  });
});

// Basic root endpoint
app.get("/", (req, res) => {
  res.send("Smart Contract Builder Backend is running!");
});

app.listen(port, () => {
  console.log(`Server listening at http://localhost:${port}`);
});
